from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    CallbackQuery,
    Message
)
from pathlib import Path
from config import Config
import logging
import re
from datetime import datetime, date
import asyncio
from database import NewsDatabase

logger = logging.getLogger(__name__)

class TelegramClient:
    def __init__(self, dp: Dispatcher, db: NewsDatabase):
        self.bot = Bot(token=Config.TELEGRAM_TOKEN)
        self._dp = dp
        self.db = db
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.pinned_message_id = db.get_pinned_message_id()
        self.sections = db.get_pinned_sections() or {
            'stocks': {'content': None, 'time': None, 'emoji': 'üìä'},
            'dividends': {'content': None, 'time': None, 'emoji': 'üíµ'},
            'commodities': {'content': None, 'time': None, 'emoji': 'üõ¢Ô∏è'},
            'crypto': {'content': None, 'time': None, 'emoji': 'üí∞'}
        }
        
        self.current_date = date.today()
        self._register_handlers()
        logger.info(f"Initialized with pinned message: {self.pinned_message_id}")

    def _extract_content(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –í–°–ï —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        return message.caption if message.caption else message.text or ""
        text = message.caption if message.caption else message.text
        if not text:
            return ""
    
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É)
        #content = text.split('\n', 1)[1].strip() if '\n' in text else text
        content = text.strip()  # —É–±–∏—Ä–∞–µ—Ç whitespace –ø–æ –∫—Ä–∞—è–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        lines = []
        indicator_emojis = {'üü¢', 'üî¥', '‚ö™', 'üí∞', 'üõ¢Ô∏è', 'üìä', 'üíµ'}  # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    
        for line in content.split('\n'):
            if not line.strip():
                continue
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            preserved_emojis = []
            rest_of_line = []
        
            for char in line:
                if char in indicator_emojis:
                    preserved_emojis.append(char)
                else:
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ-—ç–º–æ–¥–∑–∏ —Å–∏–º–≤–æ–ª–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞)
                    if not rest_of_line and not char.isspace():
                        rest_of_line.append(char)
                    elif rest_of_line:
                        rest_of_line.append(char)
        
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            cleaned_line = (' '.join(preserved_emojis) + ' ' + ''.join(rest_of_line)).strip()
            lines.append(cleaned_line)
    
        return '\n'.join(lines)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        @self._dp.callback_query(F.data == 'delete_message')
        async def delete_handler(callback: CallbackQuery):
            try:
                await callback.message.delete()
                await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"Delete error: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

        @self._dp.callback_query(F.data.startswith('update_pinned_'))
        async def update_pinned_handler(callback: CallbackQuery):
            try:
                content_type = callback.data.split('_')[-1]
                if content_type not in self.sections:
                    logger.error(f"Unknown content type: {content_type}")
                    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)
                    return

                await self._process_pinned_update(callback, content_type)
                await callback.answer("–ó–∞–∫—Ä–µ–ø –æ–±–Ω–æ–≤–ª—ë–Ω")
            except Exception as e:
                logger.error(f"Pin update error: {e}", exc_info=True)
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                
        @self._dp.callback_query(F.data == 'forward_to_channel')
        async def forward_handler(callback: CallbackQuery):
            try:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
                await self.bot.copy_message(
                    chat_id=Config.TARGET_CHANNEL_ID,
                    from_chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id
                )
                await callback.answer("–ù–æ–≤–æ—Å—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
            except Exception as e:
                logger.error(f"Forward error: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ", show_alert=True)
                
    async def _edit_existing_message(self, text: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await self.bot.edit_message_text(
            chat_id=Config.TARGET_CHANNEL_ID,
            message_id=self.pinned_message_id,
            text=text,
            parse_mode='HTML'
        )

    async def _process_pinned_update(self, callback: CallbackQuery, content_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            now_str = datetime.now().strftime('%H:%M')
            raw_content = self._extract_content(callback.message)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            self.sections[content_type] = {
                'content': raw_content,
                'time': now_str,
                'emoji': self.sections[content_type]['emoji']
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.db.save_pinned_section(content_type, raw_content, now_str)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_text = self._build_pinned_message()
            
            if self.pinned_message_id:
                try:
                    await self.bot.edit_message_text(
                        chat_id=Config.TARGET_CHANNEL_ID,
                        message_id=self.pinned_message_id,
                        text=full_text,
                        parse_mode='HTML'
                    )
                    logger.info(f"Updated pinned message {self.pinned_message_id}")
                except Exception as e:
                    logger.warning(f"Edit failed: {e}, creating new message")
                    await self._create_new_pinned_message(full_text)
            else:
                await self._create_new_pinned_message(full_text)
                
        except Exception as e:
            logger.error(f"Failed to update pinned: {e}")
            raise

    def _preserve_formatting(self, content: str, content_type: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        if not content:
            return content
            
        # –î–ª—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º üí∞ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        if content_type == 'dividends':
            lines = []
            for line in content.split('\n'):
                if line.strip() and not line.startswith('üí∞'):
                    lines.append(f"üí∞ {line}")
                else:
                    lines.append(line)
            return '\n'.join(lines)
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        return content.replace('üü¢', '').replace('üî¥', '').replace('‚ö™', '')

    def _build_pinned_message(self) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        sections = []
        titles = {
            'stocks': '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å—ã',
            'dividends': '–ë–ª–∏–∂–∞–π—à–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã',
            'commodities': '–¢–æ–≤–∞—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã',
            'crypto': '–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'
        }
        
        for content_type, data in self.sections.items():
            if data['content']:
                title = f"{data['emoji']} <b>{titles[content_type]} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {data['time']}):</b>"
                sections.append(f"{title}\n{data['content']}")
        
        return '\n\n'.join(sections)

    async def _create_new_pinned_message(self, text: str):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        msg = await self.bot.send_message(
            chat_id=Config.TARGET_CHANNEL_ID,
            text=text,
            parse_mode='HTML'
        )
        await self.bot.pin_chat_message(
            chat_id=Config.TARGET_CHANNEL_ID,
            message_id=msg.message_id,
            disable_notification=True
        )
        self.pinned_message_id = msg.message_id
        self.db.save_pinned_message(msg.message_id)
        logger.info(f"Created new pinned message: {msg.message_id}")

    def _extract_raw_content(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        text = message.caption if message.caption else message.text
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        if '\n' in text:
            #content = text.split('\n', 1)[1].strip()
            content = text.strip()  # —É–±–∏—Ä–∞–µ—Ç whitespace –ø–æ –∫—Ä–∞—è–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        else:
            content = text
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —ç–º–æ–¥–∑–∏
        lines = []
        for line in content.split('\n'):
            clean_line = re.sub(r'^[^a-zA-Z–∞-—è–ê-–Ø0-9]*', '', line.strip())
            if clean_line:
                lines.append(clean_line)
        
        return '\n'.join(lines)

    def _build_pinned_message(self) -> str:
        """–°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        sections = []
        type_map = {
            'stocks': ('üìä', '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å—ã'),
            'dividends': ('üíµ', '–ë–ª–∏–∂–∞–π—à–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã'),
            'commodities': ('üõ¢Ô∏è', '–¢–æ–≤–∞—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã'),
            'crypto': ('üí∞', '–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç')
        }
        
        for content_type, data in self.sections.items():
            if data['content']:
                emoji, title = type_map[content_type]
                time_str = data['time'] or "–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å"
                sections.append(
                    f"{emoji} <b>{title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {time_str}):</b>\n{data['content']}"
                )
        
        return '\n\n'.join(sections) if sections else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    async def safe_send(self, text: str, image_path: str = None, content_type: str = None, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
        try:
            if parse_mode != 'HTML':
                text = self._clean_text(text)

            # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not content_type:
                content_type = self._detect_content_type(text)
    
            # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤–æ—Å—Ç–∏) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            return await self._send_with_controls(text, image_path, content_type, parse_mode)

        except Exception as e:
            logger.error(f"Send error: {e}")
            return False
        
    async def _send_with_pin_controls(self, text: str, image_path: str, content_type: str, parse_mode: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–æ–º"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üìå –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø", callback_data=f"update_pinned_{content_type}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_message")
        ]])
    
        try:
            if image_path and Path(image_path).exists():
                await self.bot.send_photo(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    photo=FSInputFile(image_path),
                    caption=text[:1020] if len(text) > 1020 else text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard
                )
            else:
                await self.bot.send_message(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard
                )
            return True
        finally:
            if image_path and Path(image_path).exists():
                Path(image_path).unlink(missing_ok=True)

    async def _forward_news(self, text: str, image_path: str, parse_mode: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª"""
        try:
            if image_path and Path(image_path).exists():
                await self.bot.send_photo(
                    chat_id=Config.TARGET_CHANNEL_ID,
                    photo=FSInputFile(image_path),
                    caption=text[:1020] if len(text) > 1020 else text,
                    parse_mode=parse_mode
                )
            else:
                await self.bot.send_message(
                    chat_id=Config.TARGET_CHANNEL_ID,
                    text=text,
                    disable_web_page_preview=True,
                    parse_mode=parse_mode
                )
            return True
        finally:
            if image_path and Path(image_path).exists():
                Path(image_path).unlink(missing_ok=True)
                
    def _prepare_content(self, text: str, content_type: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏"""
        if not text:
            return ""
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º üí∞ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if content_type == 'dividends':
            lines = []
            for line in text.split('\n'):
                if line.strip() and not line.startswith(('üí∞', 'üü¢', 'üî¥', '‚ö™')):
                    lines.append(f"üí∞ {line}")
                else:
                    lines.append(line)
            return '\n'.join(lines)
        
        return text
                
    async def _send_with_controls(self, text: str, image_path: str, content_type: str, parse_mode: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        text = self._prepare_content(text, content_type)
        # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π - –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª"
        if content_type == 'news':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìå –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="forward_to_channel"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_message")
            ]])
        # –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø"
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìå –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø", callback_data=f"update_pinned_{content_type}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_message")
            ]])

        try:
            if image_path and Path(image_path).exists():
                await self.bot.send_photo(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    photo=FSInputFile(image_path),
                    caption=text[:1020] if len(text) > 1020 else text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard
                )
            else:
                await self.bot.send_message(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    text=text,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )
            return True
        finally:
            if image_path and Path(image_path).exists():
                Path(image_path).unlink(missing_ok=True)

    def _detect_content_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π"""
        text_lower = text.lower()
        if "–Ω–æ–≤–æ—Å—Ç" in text_lower or "—Ä–±–∫" in text_lower or "—Ç–∞—Å—Å" in text_lower:
            return 'news'
        elif "—Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–π" in text_lower or "–∏–Ω–¥–µ–∫—Å" in text_lower:
            return 'stocks'
        elif "–¥–∏–≤–∏–¥–µ–Ω–¥" in text_lower:
            return 'dividends'
        elif "—Ç–æ–≤–∞—Ä–Ω" in text_lower or "–Ω–µ—Ñ—Ç—å" in text_lower:
            return 'commodities'
        elif "–∫—Ä–∏–ø—Ç" in text_lower:
            return 'crypto'
        return 'other'