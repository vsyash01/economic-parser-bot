import asyncio
import logging
from datetime import datetime
from playwright.async_api import async_playwright
from services.telegram_client import TelegramClient
from config import Config
from aiogram import Bot, Dispatcher, F
from database import NewsDatabase

logger = logging.getLogger(__name__)

class MOEXParser:
    def __init__(self, dp: Dispatcher, db: NewsDatabase):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä db
        self.tg = TelegramClient(dp, db)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        self.base_timeout = 45000  # 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.load_timeout = 90000  # 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.db = db  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ë–î –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    async def handle_disclaimer(self, page):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞ MOEX —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            accept_buttons = [
                'button:has-text("–ü—Ä–∏–Ω–∏–º–∞—é")',
                '.btn2.btn2-primary',
                'button[type="submit"]:has-text("–ü—Ä–∏–Ω—è—Ç—å")',
                'text=/–ü—Ä–∏–Ω—è—Ç—å|–°–æ–≥–ª–∞—Å–µ–Ω|Agree/i'
            ]
            
            for selector in accept_buttons:
                try:
                    if await page.locator(selector).count() > 0:
                        await page.click(selector, timeout=15000)
                        logger.info("MOEX disclaimer accepted")
                        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        return True
                except Exception as e:
                    logger.debug(f"Disclaimer button not found with selector: {selector}")
                    continue
            
            logger.info("No disclaimer found or already accepted")
            return False
            
        except Exception as e:
            logger.warning(f"Error handling disclaimer: {str(e)[:200]}")
            return False

    async def parse_indexes(self, page):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ MOEX —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü"""
        indexes = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç–æ—Ä–≥–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            trade_date = await page.locator('header h2:first-child').text_content()
            trade_date = trade_date.replace('–•–æ–¥ —Ç–æ—Ä–≥–æ–≤,', '').strip()
            
            # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É "–ò–Ω–¥–µ–∫—Å—ã" –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await page.select_option('#securitygroups', value='12', timeout=self.base_timeout)
            await self._click_with_retry(page, '.MarketDataNewGroup_submitButton_RV0VB')
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            await page.wait_for_selector('.ui-table', state='visible', timeout=self.base_timeout)
            await asyncio.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            imoex = await self._get_index_data(page, 'IMOEX', '–ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏', trade_date)
            rts = await self._get_index_data(page, 'RTSI', '–ò–Ω–¥–µ–∫—Å –†–¢–°', trade_date)
            rgbi = await self._get_index_data(page, 'RGBI', '–ò–Ω–¥–µ–∫—Å –ú–æ—Å–±–∏—Ä–∂–∏ –≥–æ—Å –æ–±–ª RGBI', trade_date)
            
            if imoex:
                indexes.append(imoex)
            else:
                indexes.append(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏ (IMOEX): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ({trade_date})")
                
            if rts:
                indexes.append(rts)
            else:
                indexes.append(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –†–¢–° (RTSI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ({trade_date})")
                
            if rgbi:
                indexes.append(rgbi)
            else:
                indexes.append(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–π (RGBI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ({trade_date})")
                
            return indexes, trade_date
            
        except Exception as e:
            logger.error(f"Error parsing indexes: {str(e)[:200]}")
            return [
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏ (IMOEX): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –†–¢–° (RTSI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–π (RGBI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            ], "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
        except Exception as e:
            logger.error(f"Error parsing indexes: {str(e)[:200]}")
            return [
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏ (IMOEX): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –†–¢–° (RTSI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å –≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–π (RGBI): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            ], "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    async def _get_index_data(self, page, ticker, name, trade_date):
        """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            max_pages_to_check = 11
            pages_checked = 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            result = await self._check_current_page_for_index(page, ticker, name, trade_date)
            if result:
                return result
    
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            while pages_checked < max_pages_to_check:
                try:
                    next_btn = page.locator('button.UiPaginationButton_buttonNew_KSmaR >> text="–í–ø–µ—Ä–µ–¥ ‚Ä∫"')
                    if await next_btn.is_enabled():
                        await next_btn.click()
                        await asyncio.sleep(2)
                        await page.wait_for_selector('.ui-table', timeout=10000)
                        pages_checked += 1
                
                        result = await self._check_current_page_for_index(page, ticker, name, trade_date)
                        if result:
                            return result
                    else:
                        break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {str(e)[:100]}")
                    break
    
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            while pages_checked > 1:
                try:
                    prev_btn = page.locator('button.UiPaginationButton_buttonNew_KSmaR >> text="‚Äπ –ù–∞–∑–∞–¥"')
                    if await prev_btn.is_enabled():
                        await prev_btn.click()
                        await asyncio.sleep(2)
                        pages_checked -= 1
                    else:
                        break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {str(e)[:100]}")
                    break
                
            return None

        except Exception as e:
            logger.warning(f"Error getting index {ticker}: {str(e)[:100]}")
            return None

    async def _check_current_page_for_index(self, page, ticker, name, trade_date):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            rows = await page.query_selector_all('.ui-table-row.-interactive')
            for row in rows:
                try:
                    row_text = await row.inner_text()
                    parts = [p.strip() for p in row_text.split('\n') if p.strip()]

                    if len(parts) >= 4:
                        row_ticker = parts[0].replace('\xa0', ' ').strip()
                        row_name = parts[1].replace('\xa0', ' ').strip()

                        if row_ticker == ticker and row_name == name:
                            price = parts[2].replace('.', ',')
                            change = parts[3].replace('.', ',')
                            time_elem = await row.query_selector('td:last-child div')
                            time = await time_elem.text_content() if time_elem else "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            emoji = "üü¢" if '+' in change else "üî¥" if '-' in change else "‚ö™"
                            return f"{emoji} {name} ({ticker}): {price} {change} | {time}"
                except:
                    continue
            return None
        except Exception as e:
            logger.warning(f"Error checking page for index {ticker}: {str(e)[:100]}")
            return None

    async def parse_stocks(self, page, trade_date):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ø–æ–≤—ã—Ö –∞–∫—Ü–∏–π MOEX"""
        stocks = []
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–∫—Ü–∏–∏
            await page.select_option('#securitygroups', value='4', timeout=self.base_timeout)
            await self._click_with_retry(page, '.MarketDataNewGroup_submitButton_RV0VB')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            await page.wait_for_selector('.ui-table', state='visible', timeout=self.base_timeout)
            await asyncio.sleep(2)
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–µ 15 –∞–∫—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ç–æ—Ä—ã)
            rows = await page.query_selector_all('.ui-table-row.-interactive')
            for row in rows[:15]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    cells = await row.query_selector_all('td')
                    if len(cells) < 9:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                        continue
                    
                    # –¢–∏–∫–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    ticker_elem = await cells[0].query_selector('a')
                    ticker = (await ticker_elem.text_content()).strip() if ticker_elem else ""
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    name = (await cells[1].text_content()).strip()
                    
                    # –¶–µ–Ω–∞ –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    price = (await cells[2].text_content()).strip().replace('.', ',')
                    
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    #change_elem = cells[3]
                    change_elem = await cells[3].query_selector('.PercentValue_cell_2te0M')  # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π div
                    if change_elem:
                        change_class = await change_elem.get_attribute('class')
                        logger.debug(f"Found change classes: {change_class}")
                    else:
                        change_class = ""
                        logger.warning("Change element not found")
                    change = (await change_elem.text_content()).strip()
                    #change_class = await change_elem.get_attribute('class')
                    #print(f'change_class = {change_class}\n')
                    # –í—Ä–µ–º—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    time = (await cells[-1].text_content()).strip()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if 'PercentValue_cell_modUp' in change_class:
                        emoji = "üü¢"
                    elif 'PercentValue_cell_modDown' in change_class:
                        emoji = "üî¥"
                    else:
                        emoji = "‚ö™"
                        change = f"{change.replace('%', '').strip()}%"
                    stocks.append(f"{emoji} {name} ({ticker}): {price} {change} | {time}")
                    
                except Exception as e:
                    logger.warning(f"Error parsing stock row: {str(e)[:100]}")
                    continue
                    
            return stocks if stocks else [f"‚ÑπÔ∏è –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
            
        except Exception as e:
            logger.error(f"Error parsing stocks: {str(e)[:200]}")
            return [f"‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏—è–º"]

    async def _click_with_retry(self, page, selector, attempts=3, delay=2):
        """–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        for attempt in range(attempts):
            try:
                await page.click(selector, timeout=15000)
                await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                return True
            except Exception as e:
                if attempt == attempts - 1:
                    raise
                logger.debug(f"Click attempt {attempt + 1} failed, retrying...")
                await asyncio.sleep(delay)
        return False

    async def parse(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å MOEX"""
        async with async_playwright() as pw:
            browser = await pw.chromium.launch(
                headless=True,
                timeout=self.load_timeout
            )
            context = await browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            )
            page = await context.new_page()
            
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await page.goto('https://www.moex.com/ru/marketdata/', timeout=self.load_timeout)
                await self.handle_disclaimer(page)
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å—ã –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç–æ—Ä–≥–æ–≤
                indexes, trade_date = await self.parse_indexes(page)
                
                # –ü–∞—Ä—Å–∏–º –∞–∫—Ü–∏–∏
                stocks = await self.parse_stocks(page, trade_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                message = f"üìä <b>–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å—ã (–•–æ–¥ —Ç–æ—Ä–≥–æ–≤, {trade_date}):</b>\n" + "\n".join(indexes)
                if stocks:
                    message += f"\n\nüèõ <b>–¢–æ–ø-15 –∞–∫—Ü–∏–π (–•–æ–¥ —Ç–æ—Ä–≥–æ–≤, {trade_date}):</b>\n" + "\n".join(stocks)
                
                await self.tg.safe_send(message, content_type='stocks')
                return True
                
            except Exception as e:
                logger.error(f"MOEX parsing failed: {str(e)}")
                await self.tg.safe_send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å MOEX", content_type='stocks')
                return False
                
            finally:
                await context.close()
                await browser.close()