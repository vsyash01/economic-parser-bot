import logging
from playwright.async_api import async_playwright
from services.telegram_client import TelegramClient
from aiogram import Bot, Dispatcher, F
from database import NewsDatabase

logger = logging.getLogger(__name__)

class DividendsParser:
    def __init__(self, dp: Dispatcher, db: NewsDatabase):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä db
        self.tg = TelegramClient(dp, db)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        self.base_timeout = 45000  # 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.load_timeout = 90000  # 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.db = db  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ë–î –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    async def parse(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ —Å SmartLab"""
        try:
            async with async_playwright() as pw:
                browser = await pw.chromium.launch()
                page = await browser.new_page()
                
                await page.goto('https://smart-lab.ru/dividends/', timeout=60000)
                await page.wait_for_selector('table.simple-little-table', timeout=15000)
                
                rows = await page.query_selector_all('table.simple-little-table tbody tr.dividend_approved')
                dividends = []
                
                for row in rows[:10]:  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-10
                    try:
                        cells = await row.query_selector_all('td')
                        if len(cells) >= 10:
                            company = (await cells[0].inner_text()).strip()
                            ticker = (await cells[1].inner_text()).strip()
                            amount = (await cells[3].inner_text()).strip()
                            yield_pct = (await cells[4].inner_text()).strip('%')
                            payment_date = (await cells[8].inner_text()).strip()
                            
                            div_str = (
                                f"üí∞ {company} ({ticker}): {amount} —Ä—É–±. "
                                f"(–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {yield_pct}%), "
                                f"–¥–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã: {payment_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
                            )
                            dividends.append(div_str)
                    except Exception as e:
                        logger.warning(f"Dividend row error: {str(e)[:100]}")
                        continue
                
                if dividends:
                    await self.tg.safe_send("üíµ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã:</b>\n" + "\n".join(dividends),
    content_type='dividends')
                else:
                    await self.tg.safe_send("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö",
    content_type='dividends')
                
                return True
        except Exception as e:
            logger.error(f"Dividend parse failed: {str(e)}")
            await self.tg.safe_send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º",
    content_type='dividends')
            return False